local cigs_ini = ini_file("items\\settings\\enjoy_cigs_cfg.ltx")
local ini_eff = ini_file("items\\items\\animations_settings.ltx")
is_enjoying = false

function is_cigarette(obj)
    return obj and cigs_ini:r_bool_ex("cigs", obj:section())
end

function has_asnens_long_anim()
    return ini_eff:r_string_ex("cigar1_alt", "cam") == "itemuse_anm_effects\\cig_pack_asnen_long.anm"
end

function is_valid_cigarette(obj, bag, mode)
    return is_cigarette(obj) and (mode == "inventory") and (bag == "actor_bag")
end

function get_functor_name(obj, bag, mode)
    return "st_enjoy_cigs"
end

function enjoy_cigarette(obj, bag, mode)
    -- Prevents a possible busy hands bug
    if is_enjoying then
        return
    end

    -- Go through the item manager 'actor_on_item_before_use' function
    local flags = { ret_value = false }
	a_tsx_enjoy_cigs_quickslot.orig_itms_manager_aoibu(obj, flags)
	if not flags.ret_value then
		return
	end

    -- Hide inventory to hide the spawned fake item
    hide_hud_inventory()

    is_enjoying = true

    -- Create fake object
    local fake_item = obj:section() .. "_alt"
    alife_create_item(fake_item, db.actor)

    -- Use must be a little delayed
    CreateTimeEvent("enjoy_cigs", "use_alt_cig", 0.25, function()
        -- Remove one use from the original item
        utils_item.discharge(obj)

        -- Item animation
        local inv_fake_item = db.actor:object(fake_item)
        enhanced_animations.use_item(inv_fake_item)

        return true
    end)

    local delay = ini_eff:r_float_ex(fake_item, "tm") * 0.001
    CreateTimeEvent("enjoy_cigs", "restore_cig_anim", delay, function()
        is_enjoying = false
        return true
    end)
end

function on_game_start()
    custom_functor_autoinject.add_functor("enjoy_cigs", is_valid_cigarette, get_functor_name, nil, enjoy_cigarette, true)
end
